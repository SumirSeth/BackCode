[
  {
    "id": 1,
    "title": "JWT Authentication",
    "languages": "Node.js",
    "desc": "JWT Authentication: Implements secure user authentication using JSON Web Tokens (JWT), handling user sessions and protecting routes.",
    "link": "/post/jwt-authentication",
    "projectStructure": {
      "name": "jwt-auth",
      "type": "folder",
      "children": [
        {
          "name": "src",
          "type": "folder",
          "children": [
            {
              "name": "components",
              "type": "folder",
              "children": [
                {
                  "name": "Header.js",
                  "type": "file"
                },
                {
                  "name": "Footer.js",
                  "type": "file"
                }
              ]
            },
            {
              "name": "pages",
              "type": "folder",
              "children": [
                {
                  "name": "index.js",
                  "type": "file"
                },
                {
                  "name": "about.js",
                  "type": "file"
                }
              ]
            },
            {
              "name": "styles",
              "type": "folder",
              "children": [
                {
                  "name": "globals.css",
                  "type": "file"
                }
              ]
            }
          ]
        },
        {
          "name": "app.js",
          "type": "file"
        },
        {
          "name": "package.json",
          "type": "file"
        },
        {
          "name": "README.md",
          "type": "file"
        }
      ]
    },
    "brief": "JWT Authentication: Implements secure user authentication using JSON Web Tokens (JWT), handling user sessions and protecting routes. JWT tokens consist of three parts: Header, Payload, Signature.",
    "files": [
      {
        "name": "app.js",
        "content": "const express = require('express');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\napp.use(express.json());\n\n// Secret key for JWT\nconst secretKey = 'your-secret-key';\n\n// Mock user data\nconst users = [\n  { id: 1, username: 'user1', password: 'password1' },\n  { id: 2, username: 'user2', password: 'password2' }\n];\n\n// Login route\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find(u => u.username === username && u.password === password);\n\n  if (user) {\n    const token = jwt.sign({ id: user.id, username: user.username }, secretKey, { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).json({ message: 'Invalid credentials' });\n  }\n});\n\n// Protected route\napp.get('/protected', authenticateToken, (req, res) => {\n  res.json({ message: 'Access granted to protected route', user: req.user });\n});\n\n// Middleware to authenticate token\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (token == null) return res.sendStatus(401);\n\n  jwt.verify(token, secretKey, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
      },
      {
        "name": "new.app.js",
        "content": "const new = 'app.js/'"
      }
    ]
  },
  {
    "id": 2,
    "title": "RESTful API with Express",
    "languages": "Node.js",
    "desc": "RESTful API: Develops a basic CRUD API using Express.js, handling resource creation, retrieval, updates, and deletion.",
    "link": "/post/restful-api-express",
    "projectStructure": {
      "name": "restful-api",
      "type": "folder",
      "children": [
        {
          "name": "src",
          "type": "folder",
          "children": [
            {
              "name": "controllers",
              "type": "folder",
              "children": [
                {
                  "name": "userController.js",
                  "type": "file"
                }
              ]
            },
            {
              "name": "models",
              "type": "folder",
              "children": [
                {
                  "name": "userModel.js",
                  "type": "file"
                }
              ]
            },
            {
              "name": "routes",
              "type": "folder",
              "children": [
                {
                  "name": "userRoutes.js",
                  "type": "file"
                }
              ]
            }
          ]
        },
        {
          "name": "app.js",
          "type": "file"
        },
        {
          "name": "package.json",
          "type": "file"
        },
        {
          "name": "README.md",
          "type": "file"
        }
      ]
    },
    "brief": "This project demonstrates a simple RESTful API for user data management, handling basic CRUD operations (Create, Read, Update, Delete) with Express.js.",
    "files": [
      {
        "name": "app.js",
        "content": "const express = require('express');\nconst userRoutes = require('./src/routes/userRoutes');\n\nconst app = express();\napp.use(express.json());\n\napp.use('/users', userRoutes);\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
      },
      {
        "name": "userController.js",
        "content": "const express = require('express');\nconst userRoutes = require('./src/routes/userRoutes');\n\nconst app = express();\napp.use(express.json());\n\napp.use('/users', userRoutes);\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
      }
    ]
  },
  {
    "id": 3,
    "title": "GraphQL API with Apollo Server",
    "languages": "Node.js",
    "desc": "GraphQL API: Builds a GraphQL API using Apollo Server, defining schemas, resolvers, and integrating queries and mutations for user data.",
    "link": "/post/graphql-api-apollo",
    "projectStructure": {
      "name": "graphql-api",
      "type": "folder",
      "children": [
        {
          "name": "src",
          "type": "folder",
          "children": [
            {
              "name": "schemas",
              "type": "folder",
              "children": [
                {
                  "name": "userSchema.js",
                  "type": "file"
                }
              ]
            },
            {
              "name": "resolvers",
              "type": "folder",
              "children": [
                {
                  "name": "userResolvers.js",
                  "type": "file"
                }
              ]
            }
          ]
        },
        {
          "name": "server.js",
          "type": "file"
        },
        {
          "name": "package.json",
          "type": "file"
        },
        {
          "name": "README.md",
          "type": "file"
        }
      ]
    },
    "brief": "This project implements a simple GraphQL API for user data using Apollo Server, with sample queries and mutations.",
    "files": [
      {
        "name": "server.js",
        "content": "const { ApolloServer } = require('apollo-server');\nconst typeDefs = require('./src/schemas/userSchema');\nconst resolvers = require('./src/resolvers/userResolvers');\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nserver.listen().then(({ url }) => {\n  console.log(`ðŸš€ Server ready at ${url}`);\n});"
      }
    ]
  },
  {
    "id": 4,
    "title": "Socket.IO Real-time Chat App",
    "languages": "Node.js",
    "desc": "Socket.IO Chat App: Implements a real-time chat application using Socket.IO, enabling real-time communication between connected users.",
    "link": "/post/socketio-chat-app",
    "projectStructure": {
      "name": "chat-app",
      "type": "folder",
      "children": [
        {
          "name": "src",
          "type": "folder",
          "children": [
            {
              "name": "public",
              "type": "folder",
              "children": [
                {
                  "name": "index.html",
                  "type": "file"
                }
              ]
            },
            {
              "name": "server.js",
              "type": "file"
            }
          ]
        },
        {
          "name": "package.json",
          "type": "file"
        },
        {
          "name": "README.md",
          "type": "file"
        }
      ]
    },
    "brief": "This project creates a real-time chat application where users can join rooms and send messages in real-time using Socket.IO.",
    "files": [
      {
        "name": "server.js",
        "content": "const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\napp.use(express.static('src/public'));\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n\n  socket.on('message', (msg) => {\n    io.emit('message', msg);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n});\n\nserver.listen(3000, () => console.log('Server running on port 3000'));"
      }
    ]
  },
  {
    "id": 5,
    "title": "Node.js Task Scheduler",
    "languages": "Node.js",
    "desc": "Task Scheduler: Implements a simple task scheduler using Node.js and the 'node-cron' library to schedule and manage repetitive tasks.",
    "link": "/post/node-task-scheduler",
    "projectStructure": {
      "name": "task-scheduler",
      "type": "folder",
      "children": [
        {
          "name": "src",
          "type": "folder",
          "children": [
            {
              "name": "tasks",
              "type": "folder",
              "children": [
                {
                  "name": "task1.js",
                  "type": "file"
                },
                {
                  "name": "task2.js",
                  "type": "file"
                }
              ]
            }
          ]
        },
        {
          "name": "scheduler.js",
          "type": "file"
        },
        {
          "name": "package.json",
          "type": "file"
        },
        {
          "name": "README.md",
          "type": "file"
        }
      ]
    },
    "brief": "This project demonstrates how to create a task scheduler using Node.js and 'node-cron' to automate and manage scheduled tasks like sending notifications or backups.",
    "files": [
      {
        "name": "scheduler.js",
        "content": "const cron = require('node-cron');\n\ncron.schedule('0 0 * * *', () => {\n  console.log('Running a task every midnight');\n});\n\ncron.schedule('*/5 * * * *', () => {\n  console.log('Running a task every 5 minutes');\n});"
      }
    ]
  },
  {
    "title": "Hello",
    "languages": "JavaScript",
    "desc": "This is a project named in projects",
    "link": "/post/hello-js",
    "brief": "more briefing of the project",
    "projectStructure": {
      "name": "root",
      "type": "folder",
      "children": [
        {
          "name": "app.js",
          "type": "file"
        },
        {
          "name": "src",
          "type": "folder",
          "children": [
            {
              "name": "controllers",
              "type": "folder",
              "children": [
                {
                  "name": "useControllers.js",
                  "type": "file"
                }
              ]
            },
            {
              "name": "index.js",
              "type": "file"
            }
          ]
        }
      ]
    },
    "files": [
      {
        "name": "app.js",
        "content": "some content on this file"
      },
      {
        "name": "index.js",
        "content": "some more content on this file"
      },
      {
        "name": "useController.js",
        "content": "some more content for the booting"
      }
    ],
    "id": 6
  }
]